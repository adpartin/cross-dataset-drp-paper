"""
Stage 2: Compute G Matrices from Performance Scores
====================================================

This stage generates cross-study analysis (CSA) G matrices from computed performance scores.
G matrices represent performance metrics organized as source × target dataset matrices,
which are used for downstream generalization analysis.

PURPOSE:
--------
- Reads computed scores from Stage 1 (outputs/scores/)
- Organizes scores into source × target matrices (G matrices) for each model and metric
- Computes mean and standard deviation across splits for each (source, target) pair
- Generates G matrices that quantify cross-dataset generalization performance

INPUT:
------
- Score CSV files from outputs/scores/ directory (generated by Stage 1)
- Files: all_models_scores.csv and <MODEL>_scores.csv for each model

OUTPUT:
-------
- Creates G_matrices/ directory with CSA table files
- Per-model, per-metric mean tables: <MODEL>_<METRIC>_mean_csa_table.csv
- Per-model, per-metric std tables: <MODEL>_<METRIC>_std_csa_table.csv
- All matrices saved to outputs/G_matrices/

USAGE:
------
    python s2_compute_G_matrices.py [--input_dir <input_directory>] [--outdir <output_directory>]

RUNTIME:
--------
- Typical runtime: < 1 minute
"""

import argparse
import logging
import time
from pathlib import Path
from postprocess_utils import (
    compute_csa_tables_from_averaged_splits,
    setup_logging
)


def main():
    start_time = time.time()

    parser = argparse.ArgumentParser(
        description='Stage 2: Compute G matrices from performance scores.',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument(
        '--input_dir',
        default='./outputs/scores',
        type=str,
        help='Input directory containing scores from Stage 1 (default: ./outputs/scores)'
    )
    parser.add_argument(
        '--outdir',
        default='./outputs',
        type=str,
        help='Output directory root (default: ./outputs)'
    )
    args = parser.parse_args()

    # Create output directory structure
    input_dir = Path(args.input_dir)
    outdir = Path(args.outdir) / 'G_matrices'
    outdir.mkdir(parents=True, exist_ok=True)
    
    # Create logs directory before setting up logging
    logs_dir = Path('./logs')
    logs_dir.mkdir(parents=True, exist_ok=True)
    
    setup_logging(log_file=str(logs_dir / 's2_compute_G_matrices.log'))
    
    logging.info(f"\n{'=' * 50}")
    logging.info("Stage 2: Compute G Matrices from Performance Scores")
    logging.info("=" * 50)
    logging.info(f"Input: {input_dir}")
    logging.info(f"Output: {outdir}")
    
    # Validate input directory exists
    if not input_dir.exists():
        logging.error(f"Input directory not found: {input_dir}")
        logging.error("Please run Stage 1 (s1_compute_scores.py) first to generate scores.")
        raise FileNotFoundError(f"Input directory not found: {input_dir}")
    
    # Check for required input files
    required_file = input_dir / 'all_models_scores.csv'
    if not required_file.exists():
        logging.error(f"Required file not found: {required_file}")
        logging.error("Please run Stage 1 (s1_compute_scores.py) first.")
        raise FileNotFoundError(f"Required file not found: {required_file}")
    
    logging.info(f"Found input scores in {input_dir}")
    
    # Generate CSA tables (G matrices)
    compute_csa_tables_from_averaged_splits(
        input_dir=input_dir,
        outdir=outdir
    )

    runtime = (time.time() - start_time) / 60
    logging.info(f"Runtime: {runtime:.2f} minutes")
    logging.info(f"Stage 2 complete. G matrices saved to {outdir}")
    
    print(f'\n✅ Finished {Path(__file__).name}!')


if __name__ == "__main__":
    main()
